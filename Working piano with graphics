import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.sound.midi.*;
import java.util.concurrent.*;

public class GraphicsPractice
{
    private static MidiChannel pianoChannel;

    public static void main(String[] args) throws Exception
    {
        Synthesizer synth = MidiSystem.getSynthesizer();
        synth.open();
        pianoChannel = synth.getChannels()[0];

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int screenWidth = (int) screenSize.getWidth();
        int screenHeight = (int) screenSize.getHeight();

        JFrame frame = new JFrame("Piano");
        frame.setSize(screenWidth / 2, screenHeight / 3);//Or use 1280 and 720
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new GridLayout(1, 24));//24 keys (White + Black)

        //Define notes for a simple piano range (Two middle octaves)
        String[] keyNotes = {
            "C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4",
            "G#4", "A4", "A#4", "B4", "C5", "C#5", "D5", "D#5",
            "E5", "F5", "F#5", "G5", "G#5", "A5", "A#5", "B5"
        };

        //Create piano keys
        for (int i = 0; i < 24; i++)
        {
            JButton keyButton = new JButton();
            keyButton.setPreferredSize(new Dimension(screenWidth / 24, screenHeight));
            //Black Keys
            if (i % 2 == 1 && (i % 12 != 2 && i % 12 != 5 && i % 12 != 7 && i % 12 != 10))
            {
                keyButton.setBackground(Color.DARK_GRAY);
                final String note = keyNotes[i];
                keyButton.addActionListener(new ActionListener()
                {
                    public void actionPerformed(ActionEvent e)
                    {
                        playNote(note);
                    }
                });
            }
            //White keys
            else
            {
                keyButton.setBackground(Color.WHITE);
                final String note = keyNotes[i];
                keyButton.addActionListener(new ActionListener()
                {
                    public void actionPerformed(ActionEvent e)
                    {
                        playNote(note);
                    }
                });
            }
            frame.add(keyButton);
        }

        //Add key press listeners for actual keyboard input
        frame.addKeyListener(new KeyAdapter()
        {
            public void keyPressed(KeyEvent e)
            {
                char keyChar = e.getKeyChar();
                String note = keyToNote(keyChar);
                if (note != null)
                {
                    playNote(note);
                }
            }
        });
        frame.setFocusable(true);
        frame.setVisible(true);
    }

    //Utility method to map keypress to note
    private static String keyToNote(char keyChar)
    {
        switch (keyChar)//Corresponds a key on keyboard to a note as a string
        {
            case 'z': return "C4";
            case 's': return "C#4";
            case 'x': return "D4";
            case 'd': return "D#4";
            case 'c': return "E4";
            case 'v': return "F4";
            case 'g': return "F#4";
            case 'b': return "G4";
            case 'h': return "G#4";
            case 'n': return "A4";
            case 'j': return "A#4";
            case 'm': return "B4";
            case 'q': return "C5";
            case '2': return "C#5";
            case 'w': return "D5";
            case '3': return "D#5";
            case 'e': return "E5";
            case 'r': return "F5";
            case '5': return "F#5";
            case 't': return "G5";
            case '6': return "G#5";
            case 'y': return "A5";
            case '7': return "A#5";
            case 'u': return "B5";
            default: return null;
        }
    }

    //Play MIDI note
    private static void playNote(String note)
    {
        int midiNote = noteToMidi(note);
        if (midiNote != -1)
        {
            pianoChannel.noteOn(midiNote, 800);
        }
    }

    //Convert note name to MIDI number
    private static int noteToMidi(String note)
    {
        switch (note)//Corresponds the string note to its note integer value
        {
            case "C4": return 60;
            case "C#4": return 61;
            case "D4": return 62;
            case "D#4": return 63;
            case "E4": return 64;
            case "F4": return 65;
            case "F#4": return 66;
            case "G4": return 67;
            case "G#4": return 68;
            case "A4": return 69;
            case "A#4": return 70;
            case "B4": return 71;
            case "C5": return 72;
            case "C#5": return 73;
            case "D5": return 74;
            case "D#5": return 75;
            case "E5": return 76;
            case "F5": return 77;
            case "F#5": return 78;
            case "G5": return 79;
            case "G#5": return 80;
            case "A5": return 81;
            case "A#5": return 82;
            case "B5": return 83;
            default: return -1;
        }
    }
}
